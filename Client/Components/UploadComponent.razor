@using System.Linq

<p>
    <div class="file-input-zone">
        <InputFile id="input-file" OnChange="@OnValidInputFileChange" multiple class="col-1" onmouseout="@(async()=>{await Task.Delay(5000); FileNames.Clear();})" />
        <div class="text-black text-center">
            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-cloud-download" viewBox="0 0 16 16">
                <path d="M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383z" />
                <path d="M7.646 15.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 14.293V5.5a.5.5 0 0 0-1 0v8.793l-2.146-2.147a.5.5 0 0 0-.708.708l3 3z" />
            </svg>
            <p class="p-2">Escolha os arquivos</p>
            <p><small>(@($"{FileNames.Count}/{MaxAllowedFiles}") arquivos)</small></p>
        </div>
    </div>
</p>

@code {

    [Parameter]
    public EventCallback<IEnumerable<IBrowserFile>> OnValidFiles { get; set; }

    [Parameter]
    public List<string> Errors { get; set; } = new();

    [Parameter]
    public int MaxAllowedFiles { get; set; } = 10;

    [Parameter]
    public long MaxFileSize { get; set; } = 10 * 1024 * 1024; // 10 MB

    private List<string> FileNames { get; set; } = new();

    private bool InProgress;

    protected override bool ShouldRender() => !InProgress;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task OnValidInputFileChange(InputFileChangeEventArgs e)
    {
        Errors.Clear();
        FileNames.Clear();

        try
        {
            InProgress = true;
            FileNames = new();

            foreach (var file in e.GetMultipleFiles(MaxAllowedFiles))
            {

                if (FileNames.Contains(file.Name))
                {
                    Errors.Add($"Arquivo {file.Name} contém nome repetido.");
                }

                if (file.Size > MaxFileSize)
                {
                    Errors.Add($"Arquivo {file.Name} contém tamanho inválido, não deve ser maior que {file.Size / 1000}KB.");
                }

                if (file.Size < 1)
                {
                    Errors.Add($"Arquivo {file.Name} contém tamanho inválido, deve ser maior que {0}B.");
                }

                FileNames.Add(file.Name);
            }
        }
        finally
        {
            InProgress = false;
        }

        // Is valid only if don't have errors
        if (!Errors.Any())
            await OnValidFiles.InvokeAsync(e.GetMultipleFiles(MaxAllowedFiles));
    }
}
